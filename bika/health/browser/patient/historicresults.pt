<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:tal="http://xml.zope.org/namespaces/tal"
    xmlns:metal="http://xml.zope.org/namespaces/metal"
    xmlns:i18n="http://xml.zope.org/namespaces/i18n"
    metal:use-macro="here/main_template/macros/master"
    i18n:domain="senaite.health">

<metal:slot fill-slot="head_slot">
    <style>
        #chart {
            font-size:0.9em;
            margin-bottom:15px;
        }
        .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }

        .x.axis path {
          display: none;
        }

        .line {
          fill: none;
          stroke: steelblue;
          stroke-width: 1.5px;
        }
        .chart-container {
            border: 1px solid #CDCDCD;
            margin: 10px 0;
            border-radius: 5px;
        }
        .chart-options {
            padding:10px;
            background: #DDDDDD;
        }
    </style>
    <script src="http://d3js.org/d3.v3.js"></script>
    <script>
        jQuery(function($){
    $(document).ready(function(){

        $('div.chart-container #interpolation').change(function(e) {
            loadChart($(this).val());
        });

        loadChart('cardinal');


        function loadChart(interpolation) {
            if ($("#chart svg").length > 0) {
                $("#chart").css('height', $("#chart").innerHeight());
                $("#chart").css('width', $("#chart").innerWidth());
            }
            $("#chart").html("");

            d3.json("historicjson", function(error, data) {
                if (error || data.length < 2) {
                    $(".chart-container").hide();
                    return;
                }
                $(".chart-container").show();
                var margin = {top: 20, right: 120, bottom: 30, left: 50},
                    width = $('#chart').innerWidth() - margin.left - margin.right,
                    height = 250 - margin.top - margin.bottom;

                var parseDate = d3.time.format("%Y-%m-%d %H:%M %p").parse;

                var x = d3.time.scale()
                    .range([0, width]);

                var y = d3.scale.linear()
                    .range([height, 0]);

                var color = d3.scale.category10();

                var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");

                var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left");

                var line = d3.svg.line()
                    .interpolate(interpolation)
                    .x(function(d) { return x(d.date); })
                    .y(function(d) { return y(d.result); });

                $('#chart').append('<svg></svg>');
                var svg = d3.select("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));
                data.forEach(function(d) {
                    d.date = parseDate(d.date);
                });

                var series = color.domain().map(function(name) {
                    return {
                      name: name,
                      values: data.map(function(d) {
                        return {date: d.date, result: +d[name]};
                      })
                    };
                });

                x.domain(d3.extent(data, function(d) { return d.date; }));

                y.domain([
                    d3.min(series, function(c) { return d3.min(c.values, function(v) { return v.result; }); }),
                    d3.max(series, function(c) { return d3.max(c.values, function(v) { return v.result; }); })
                ]);

                svg.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height + ")")
                  .call(xAxis);

                svg.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("Result");

                var serie = svg.selectAll(".serie")
                  .data(series)
                .enter().append("g")
                  .attr("class", "serie");

                serie.append("path")
                  .attr("class", "line")
                  .attr("d", function(d) { return line(d.values); })
                  .style("stroke", function(d) { return color(d.name); });

                serie.append("text")
                  .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
                  .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.result) + ")"; })
                  .attr("x", 10)
                  .attr("dy", ".35em")
                  .text(function(d) { return d.name; });

                series.forEach(function(d) {
                    res = d.results;
                    vals = d.values;
                    col = color(d.name);
                    vals.forEach(function(v) {
                        svg.append("circle")
                          .attr("r", 4)
                          .style("fill", col)
                          .attr("cx", x(v.date))
                          .attr("cy", y(v.result))
                       /* svg.append("text")
                          .attr("x", x(v.date)-5)
                          .attr("dy", y(v.result)-5)
                          .text(parseFloat(v.result).toFixed(2))*/

                    });
                });
            });

        }
    });
});
    </script>
</metal:slot>
<body>
    <metal:content-title fill-slot="content-title">
        <h1>
            <img tal:condition="view/icon | nothing"
                 tal:attributes="src view/icon"/>
            <span style="position:relative;top:-0.2em;"
                  class="documentFirstHeading"
                  tal:content="view/title"/>
        </h1>
    </metal:content-title>

    <metal:content-description fill-slot="content-description">
        <div class="documentDescription"
             tal:content="structure view/description"
             tal:condition="view/description"/>
    </metal:content-description>

    <metal:content-core fill-slot="content-core">
        <div class='chart-container'>
            <div class='chart-options'>
                <label for='interpolation'>Interpolation</label>
                <select id='interpolation' name='interpolation'>
                    <option value='cardinal' selected>cardinal</option>
                    <option value='basis'>basis</option>
                    <option value='linear'>linear</option>
                </select>
            </div>
            <div id='chart'></div>
        </div>
        <tal:historictable define='dates python:view.get_dates()'>
        <div class='bika-listing-table-container'
             tal:condition='python:len(dates)!=0'>
            <table tal:define="rows python:view.get_rows();
                           cols python:len(dates)+3;"
                   class='bika-listing-table'>
                <thead>
                    <tr>
                        <th i18n:translate="">Test</th>
                        <tal:datecols repeat="date dates">
                        <th tal:content="python:date" class='center'></th>
                        </tal:datecols>
                        <th i18n:translate="">Units</th>
                        <th i18n:translate="">Range</th>
                    </tr>
                </thead>
                <tbody class='item-listing-body'>
                    <tal:sampletypes repeat="row python:rows.itervalues()">
                    <tr>
                        <th tal:attributes="colspan python:cols;
                                            cat python:row['object'].Title();"
                            tal:content="python:row['object'].Title()"
                            class="cat_header expanded"></th>
                    </tr>
                    <tal:analyses repeat="analysis python:row['analyses'].itervalues()">
                    <tr tal:attributes="cat python:row['object'].Title()">
                        <td>
                            <span tal:content="python:analysis['title']"/>&nbsp;
                            <span style="font-size:0.8em;color:#333;" tal:content="python:' ('+analysis['keyword']+')'"/>
                        </td>
                        <tal:rowdates repeat="date dates">
			<td tal:condition="python:analysis.get(date,None)"> 
			  <span tal:content="python:analysis.get(date,{}).get('formattedresult', '')" class='center'/> - 
			  <a href="" tal:attributes="href python:analysis.get(date,{}).get('object','').aq_parent.absolute_url()">
			    <span tal:content="python:analysis.get(date,{}).get('object','').aq_parent.id" class='center'/> 
			  </a>
			</td>
			<td tal:condition="python:not analysis.get(date,None)"></td>
                        </tal:rowdates>
                        <td tal:content="python:analysis['units']"></td>
                        <td tal:content="python:analysis['specs'].get('rangecomment','')"></td>
                    </tr>
                    </tal:analyses>
                    </tal:sampletypes>
                </tbody>
            </table>
        </div>
        <div tal:condition='python:len(dates)==0'>
            <dl class="portalMessage">
                <dd i18n:translate="">No historic results found</dd>
            </dl>
        </div>
        </tal:historictable>
    </metal:content-core>
</body>
</html>
